{"ast":null,"code":"var _jsxFileName = \"/Users/plouka/Projects/slackr/frontend/src/components/Profile/EditableFields.js\";\nimport React from 'react';\nimport Edit from '@material-ui/icons/Edit';\nimport Cancel from '@material-ui/icons/Cancel';\nimport Save from '@material-ui/icons/Save';\nimport { TextField, Grid } from '@material-ui/core';\n\nfunction EditableFields({\n  editable,\n  master,\n  masterValue,\n  slaves,\n  slaveValues,\n  onSave,\n  ...props\n}) {\n  const [edit, setEdit] = React.useState(false);\n  const [prevMasterValue, setPrevMasterValue] = React.useState();\n  const [currMasterValue, setCurrMasterValue] = React.useState(masterValue);\n  const [prevSlaveValues, setPrevSlaveValues] = React.useState([]);\n  const [currSlaveValues, setCurrSlaveValues] = React.useState(slaveValues); // Handle async passing of master/slave values\n\n  React.useEffect(() => {\n    setCurrMasterValue(masterValue);\n    setCurrSlaveValues(slaveValues);\n  }, [masterValue, slaveValues]);\n\n  function toggleEdit() {\n    setPrevMasterValue(currMasterValue);\n    setPrevSlaveValues(currSlaveValues);\n    setEdit(!edit);\n  }\n\n  function icons() {\n    if (!editable) return null;\n\n    if (edit) {\n      return React.createElement(React.Fragment, null, React.createElement(Save, {\n        style: {\n          cursor: 'pointer'\n        },\n        onClick: () => {\n          if (!currMasterValue) return;\n\n          if (onSave) {\n            if (currSlaveValues) {\n              onSave(currMasterValue, ...currSlaveValues);\n            } else {\n              onSave(currMasterValue);\n            }\n          }\n\n          toggleEdit();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }), React.createElement(Cancel, {\n        style: {\n          cursor: 'pointer'\n        },\n        onClick: () => {\n          setCurrMasterValue(prevMasterValue);\n          setCurrSlaveValues(prevSlaveValues);\n          toggleEdit();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(Edit, {\n      style: {\n        cursor: 'pointer'\n      },\n      onClick: toggleEdit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    });\n  }\n\n  function onSlaveChange(event, valueIndex) {\n    let copySlaves = currSlaveValues.map((val, idx) => {\n      if (idx === valueIndex) return event.target.value;\n      return val;\n    });\n    setCurrSlaveValues(copySlaves);\n  }\n\n  function onMasterChange(event) {\n    setCurrMasterValue(event.target.value);\n  }\n\n  return React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, slaves && slaves.map((slave, idx) => {\n    return React.createElement(Grid, {\n      item: true,\n      key: idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, slave({\n      value: currSlaveValues[idx] || \"\",\n      // \"\" required for label placeholder mechanics\n      InputProps: {\n        readOnly: !edit\n      },\n      onChange: event => onSlaveChange(event, idx)\n    }));\n  }), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, master({\n    value: currMasterValue || \"\",\n    // \"\" required for label placeholder mechanics\n    InputProps: {\n      readOnly: !edit\n    },\n    onChange: onMasterChange\n  })), editable && React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, icons()));\n}\n\nexport default EditableFields;","map":{"version":3,"sources":["/Users/plouka/Projects/slackr/frontend/src/components/Profile/EditableFields.js"],"names":["React","Edit","Cancel","Save","TextField","Grid","EditableFields","editable","master","masterValue","slaves","slaveValues","onSave","props","edit","setEdit","useState","prevMasterValue","setPrevMasterValue","currMasterValue","setCurrMasterValue","prevSlaveValues","setPrevSlaveValues","currSlaveValues","setCurrSlaveValues","useEffect","toggleEdit","icons","cursor","onSlaveChange","event","valueIndex","copySlaves","map","val","idx","target","value","onMasterChange","slave","InputProps","readOnly","onChange"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Edit from '@material-ui/icons/Edit';\nimport Cancel from '@material-ui/icons/Cancel';\nimport Save from '@material-ui/icons/Save';\nimport { TextField, Grid } from '@material-ui/core';\n\nfunction EditableFields({\n  editable,\n  master,\n  masterValue,\n  slaves,\n  slaveValues,\n  onSave,\n  ...props\n}) {\n\n  const [edit, setEdit] = React.useState(false);\n  const [prevMasterValue, setPrevMasterValue] = React.useState();\n  const [currMasterValue, setCurrMasterValue] = React.useState(masterValue);\n  const [prevSlaveValues, setPrevSlaveValues] = React.useState([]);\n  const [currSlaveValues, setCurrSlaveValues] = React.useState(slaveValues);\n\n  // Handle async passing of master/slave values\n  React.useEffect(() => {\n    setCurrMasterValue(masterValue);\n    setCurrSlaveValues(slaveValues);\n  }, [masterValue, slaveValues]);\n\n  function toggleEdit() {\n    setPrevMasterValue(currMasterValue);\n    setPrevSlaveValues(currSlaveValues);\n    setEdit(!edit);\n  }\n\n  function icons() {\n    if (!editable) return null;\n    if (edit) {\n      return (\n        <>\n          <Save\n            style={{ cursor: 'pointer' }}\n            onClick={() => {\n              if (!currMasterValue) return;\n              if (onSave) {\n                if (currSlaveValues) {\n                  onSave(currMasterValue, ...currSlaveValues);\n                } else {\n                  onSave(currMasterValue);\n                }\n              }\n              toggleEdit();\n            }}\n          />\n          <Cancel\n            style={{ cursor: 'pointer' }}\n            onClick={() => {\n              setCurrMasterValue(prevMasterValue);\n              setCurrSlaveValues(prevSlaveValues);\n              toggleEdit();\n            }}\n          />\n        </>\n      );\n    }\n    return <Edit style={{ cursor: 'pointer' }} onClick={toggleEdit} />;\n  }\n  function onSlaveChange(event, valueIndex) {\n    let copySlaves = currSlaveValues.map((val, idx) => {\n      if (idx === valueIndex) return event.target.value;\n      return val;\n    });\n    setCurrSlaveValues(copySlaves);\n  }\n\n  function onMasterChange(event) {\n    setCurrMasterValue(event.target.value);\n  }\n\n  return (\n    <Grid container spacing={1} alignItems=\"flex-end\">\n      {slaves &&\n        slaves.map((slave, idx) => {\n          return (\n            <Grid item key={idx}>\n              {slave({\n                value: currSlaveValues[idx] || \"\", // \"\" required for label placeholder mechanics\n                InputProps: { readOnly: !edit },\n                onChange: (event) => onSlaveChange(event, idx),\n              })}\n            </Grid>\n          );\n        })}\n      <Grid item>\n        {master({\n          value: currMasterValue || \"\", // \"\" required for label placeholder mechanics\n          InputProps: { readOnly: !edit },\n          onChange: onMasterChange,\n        })}\n      </Grid>\n      {editable && <Grid item>{icons()}</Grid>}\n    </Grid>\n  );\n}\n\nexport default EditableFields;\n"]},"metadata":{},"sourceType":"module"}