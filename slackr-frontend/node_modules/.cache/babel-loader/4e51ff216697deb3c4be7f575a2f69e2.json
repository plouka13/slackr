{"ast":null,"code":"var _jsxFileName = \"/Users/plouka/Projects/slackr/frontend/src/components/Search/index.js\";\nimport { Typography, List, ListSubheader } from '@material-ui/core';\nimport axios from 'axios';\nimport React from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport AuthContext from '../../AuthContext';\nimport { extractUId } from '../../utils/token';\nimport Message from '../Message';\n\nfunction Search({\n  query_str,\n  ...props\n}) {\n  const [loading, setLoading] = React.useState(true);\n  const [messages, setMessages] = React.useState([]);\n  const token = React.useContext(AuthContext);\n  const u_id = extractUId(token);\n\n  function performSearch() {\n    axios.get('/search', {\n      params: {\n        token,\n        query_str\n      }\n    }).then(({\n      data\n    }) => {\n      const {\n        messages\n      } = data;\n      if (typeof messages === \"undefined\" || !Array.isArray(messages)) return;\n      setMessages(messages);\n      setLoading(false);\n    }).catch(err => {\n      setLoading(false);\n    });\n  } // Only perform search if there is a query\n\n\n  React.useEffect(() => {\n    if (query_str !== \"\") performSearch();\n  }, [token, query_str]); // If there is no query\n\n  if (query_str === \"\") {\n    return React.createElement(React.Fragment, null, React.createElement(Typography, {\n      variant: \"h4\",\n      style: {\n        marginBottom: 10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Search\"), React.createElement(Typography, {\n      variant: \"h6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Enter a query in the search bar above \\uD83D\\uDC40\"));\n  } // If there is a query\n\n\n  return React.createElement(React.Fragment, null, React.createElement(Typography, {\n    variant: \"h4\",\n    style: {\n      marginBottom: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Search Results\"), loading ? React.createElement(LinearProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }) : messages.length == 0 ? React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Your search did not return any results \\uD83D\\uDE41\") : React.createElement(List, {\n    subheader: React.createElement(ListSubheader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Messages\"),\n    style: {\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, messages.slice().reverse().map(message => React.createElement(Message, Object.assign({\n    key: message.message_id\n  }, message, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  })))));\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/plouka/Projects/slackr/frontend/src/components/Search/index.js"],"names":["Typography","List","ListSubheader","axios","React","LinearProgress","AuthContext","extractUId","Message","Search","query_str","props","loading","setLoading","useState","messages","setMessages","token","useContext","u_id","performSearch","get","params","then","data","Array","isArray","catch","err","useEffect","marginBottom","length","width","slice","reverse","map","message","message_id"],"mappings":"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","sourcesContent":["import {\n    Typography, List, ListSubheader,\n} from '@material-ui/core';\nimport axios from 'axios';\nimport React from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport AuthContext from '../../AuthContext';\nimport { extractUId } from '../../utils/token';\nimport Message from '../Message';\n\nfunction Search({ query_str, ...props }) {\n\n    const [loading, setLoading] = React.useState(true);\n    const [messages, setMessages] = React.useState([]);\n\n    const token = React.useContext(AuthContext);\n    const u_id = extractUId(token);\n\n    function performSearch() {\n        axios\n        .get('/search', {\n            params: {\n                token,\n                query_str,\n            },\n        })\n        .then(({ data }) => {\n            const { messages } = data;\n            if (typeof messages === \"undefined\" || !Array.isArray(messages)) return;\n            setMessages(messages)\n            setLoading(false);\n        })\n        .catch((err) => {\n            setLoading(false);\n        });\n    }\n\n    // Only perform search if there is a query\n    React.useEffect(() => {\n        if (query_str !== \"\") performSearch();\n    }, [token, query_str])\n\n    // If there is no query\n    if (query_str === \"\") {\n        return <>\n            <Typography variant=\"h4\" style={{marginBottom: 10}}>Search</Typography>\n            <Typography variant=\"h6\">Enter a query in the search bar above 👀</Typography>\n        </>\n    }\n\n    // If there is a query\n    return <>\n        <Typography variant=\"h4\" style={{marginBottom: 10}}>Search Results</Typography>\n        {(loading) ?\n            <LinearProgress />\n        :\n            (messages.length == 0) ?\n                <Typography variant=\"h6\">Your search did not return any results 🙁</Typography>\n            :\n                <List\n                    subheader={<ListSubheader>Messages</ListSubheader>}\n                    style={{ width: '100%' }}\n                >\n                {messages.slice().reverse().map((message) => (\n                    <Message key={message.message_id} {...message} />\n                ))}\n                </List>\n            }\n    </>\n}\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}