{"ast":null,"code":"var _jsxFileName = \"/Users/plouka/Projects/slackr/frontend/src/components/ChannelList.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { List, ListItem, ListItemIcon, ListItemText, ListSubheader } from '@material-ui/core';\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport AuthContext from '../AuthContext';\nimport AddChannelDialog from './Channel/AddChannelDialog';\nimport { useStep } from '../utils/update';\n\nfunction ChannelList({\n  channel_id: curr_channel_id\n}) {\n  const [myChannels, setMyChannels] = React.useState([]);\n  const [allChannels, setAllChannels] = React.useState([]);\n  const token = React.useContext(AuthContext);\n\n  const fetchChannelsData = () => {\n    // fetch channels data\n    const getMyChannels = axios.get('/channels/list', {\n      params: {\n        token\n      }\n    });\n    const getAllChannels = axios.get('/channels/listall', {\n      params: {\n        token\n      }\n    });\n    axios.all([getMyChannels, getAllChannels]).then(axios.spread((myChannelResponse, allChannelResponse) => {\n      const myChannelData = myChannelResponse.data.channels;\n      const allChannelData = allChannelResponse.data.channels;\n      const filteredChannels = allChannelData.filter(channel => {\n        return myChannelData.find(c => c.channel_id === channel.channel_id) === undefined;\n      });\n      setMyChannels(myChannelData);\n      setAllChannels(filteredChannels);\n    }));\n  };\n\n  const step = useStep(fetchChannelsData, [], 2);\n  return React.createElement(React.Fragment, null, React.createElement(List, {\n    subheader: React.createElement(ListSubheader, {\n      style: {\n        display: 'flex'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        flex: 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"My Channels\"), React.createElement(AddChannelDialog, {\n      callback: fetchChannelsData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, myChannels.map(({\n    channel_id,\n    name\n  }, index) => React.createElement(ListItem, {\n    button: true,\n    key: channel_id,\n    component: Link,\n    to: `/channel/${channel_id}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(ListItemIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, channel_id == curr_channel_id ? React.createElement(RadioButtonCheckedIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }) : React.createElement(RadioButtonUncheckedIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })), React.createElement(ListItemText, {\n    primary: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })))), React.createElement(List, {\n    subheader: React.createElement(ListSubheader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Other Channels\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, allChannels.map(({\n    channel_id,\n    name\n  }, index) => React.createElement(ListItem, {\n    button: true,\n    key: channel_id,\n    component: Link,\n    to: `/channel/${channel_id}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(ListItemIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, channel_id == curr_channel_id ? React.createElement(RadioButtonCheckedIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }) : React.createElement(RadioButtonUncheckedIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  })), React.createElement(ListItemText, {\n    primary: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  })))));\n}\n\nexport default ChannelList;","map":{"version":3,"sources":["/Users/plouka/Projects/slackr/frontend/src/components/ChannelList.js"],"names":["React","axios","Link","List","ListItem","ListItemIcon","ListItemText","ListSubheader","RadioButtonCheckedIcon","RadioButtonUncheckedIcon","AuthContext","AddChannelDialog","useStep","ChannelList","channel_id","curr_channel_id","myChannels","setMyChannels","useState","allChannels","setAllChannels","token","useContext","fetchChannelsData","getMyChannels","get","params","getAllChannels","all","then","spread","myChannelResponse","allChannelResponse","myChannelData","data","channels","allChannelData","filteredChannels","filter","channel","find","c","undefined","step","display","flex","map","name","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\nimport {\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListSubheader,\n} from '@material-ui/core';\n\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport AuthContext from '../AuthContext';\nimport AddChannelDialog from './Channel/AddChannelDialog';\n\nimport { useStep } from '../utils/update';\n\nfunction ChannelList({ channel_id: curr_channel_id }) {\n  const [myChannels, setMyChannels] = React.useState([]);\n  const [allChannels, setAllChannels] = React.useState([]);\n\n  const token = React.useContext(AuthContext);\n\n  const fetchChannelsData = () => {\n    // fetch channels data\n    const getMyChannels = axios.get('/channels/list', { params: { token } });\n    const getAllChannels = axios.get('/channels/listall', { params: { token } });\n\n    axios.all([getMyChannels, getAllChannels]).then(\n      axios.spread((myChannelResponse, allChannelResponse) => {\n        const myChannelData = myChannelResponse.data.channels;\n        const allChannelData = allChannelResponse.data.channels;\n        const filteredChannels = allChannelData.filter((channel) => {\n          return (\n            myChannelData.find((c) => c.channel_id === channel.channel_id) ===\n            undefined\n          );\n        });\n        setMyChannels(myChannelData);\n        setAllChannels(filteredChannels);\n      })\n    );\n  };\n\n  const step = useStep(fetchChannelsData, [], 2);\n\n  return (\n    <>\n      <List\n        subheader={\n          <ListSubheader style={{ display: 'flex' }}>\n            <span style={{ flex: 1 }}>My Channels</span>\n            <AddChannelDialog callback={fetchChannelsData} />\n          </ListSubheader>\n        }\n      >\n        {myChannels.map(({ channel_id, name }, index) => (\n          <ListItem\n            button\n            key={channel_id}\n            component={Link}\n            to={`/channel/${channel_id}`}\n          >\n            <ListItemIcon>\n              {channel_id == curr_channel_id ? (\n                <RadioButtonCheckedIcon />\n              ) : (\n                <RadioButtonUncheckedIcon />\n              )}\n            </ListItemIcon>\n            <ListItemText primary={name} />\n          </ListItem>\n        ))}\n      </List>\n      <List subheader={<ListSubheader>Other Channels</ListSubheader>}>\n        {allChannels.map(({ channel_id, name }, index) => (\n          <ListItem\n            button\n            key={channel_id}\n            component={Link}\n            to={`/channel/${channel_id}`}\n          >\n            <ListItemIcon>\n              {channel_id == curr_channel_id ? (\n                <RadioButtonCheckedIcon />\n              ) : (\n                <RadioButtonUncheckedIcon />\n              )}\n            </ListItemIcon>\n            <ListItemText primary={name} />\n          </ListItem>\n        ))}\n      </List>\n    </>\n  );\n}\n\nexport default ChannelList;\n"]},"metadata":{},"sourceType":"module"}