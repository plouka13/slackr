{"ast":null,"code":"var _jsxFileName = \"/Users/plouka/Projects/slackr/frontend/src/components/PollToggle/index.js\";\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { getIsPolling, setIsPolling, step, usePolling } from '../../utils/update';\nconst options = ['Live', 'Step'];\n\nfunction PollToggle() {\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const [selectedIndex, setSelectedIndex] = React.useState(getIsPolling() ? 0 : 1);\n  usePolling();\n\n  const handleClick = () => {\n    step();\n  };\n\n  const handleMenuItemClick = (event, index) => {\n    setIsPolling(index === 0);\n    setSelectedIndex(index);\n    setOpen(false);\n  };\n\n  const handleToggle = () => {\n    setOpen(prevOpen => !prevOpen);\n  };\n\n  const handleClose = event => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(ButtonGroup, {\n    variant: \"contained\",\n    color: \"primary\",\n    ref: anchorRef,\n    \"aria-label\": \"split button\",\n    style: {\n      marginRight: 15\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleClick,\n    disabled: selectedIndex === 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, options[selectedIndex]), React.createElement(Button, {\n    color: \"primary\",\n    size: \"small\",\n    \"aria-owns\": open ? 'menu-list-grow' : undefined,\n    \"aria-haspopup\": \"true\",\n    onClick: handleToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(ArrowDropDownIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }))), React.createElement(Popper, {\n    open: open,\n    anchorEl: anchorRef.current,\n    transition: true,\n    disablePortal: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, ({\n    TransitionProps,\n    placement\n  }) => React.createElement(Grow, Object.assign({}, TransitionProps, {\n    style: {\n      transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(Paper, {\n    id: \"menu-list-grow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(ClickAwayListener, {\n    onClickAway: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(MenuList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, options.map((option, index) => React.createElement(MenuItem, {\n    key: option,\n    disabled: index === 2,\n    selected: index === selectedIndex,\n    onClick: event => handleMenuItemClick(event, index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, option))))))));\n}\n\nexport default PollToggle;","map":{"version":3,"sources":["/Users/plouka/Projects/slackr/frontend/src/components/PollToggle/index.js"],"names":["React","Button","ButtonGroup","ArrowDropDownIcon","ClickAwayListener","Grow","Paper","Popper","MenuItem","MenuList","getIsPolling","setIsPolling","step","usePolling","options","PollToggle","open","setOpen","useState","anchorRef","useRef","selectedIndex","setSelectedIndex","handleClick","handleMenuItemClick","event","index","handleToggle","prevOpen","handleClose","current","contains","target","marginRight","undefined","TransitionProps","placement","transformOrigin","map","option"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { getIsPolling, setIsPolling, step, usePolling } from '../../utils/update';\n\nconst options = ['Live', 'Step'];\n\nfunction PollToggle() {\n\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef(null);\n    const [selectedIndex, setSelectedIndex] = React.useState(getIsPolling() ? 0 : 1);\n\n    usePolling();\n\n    const handleClick = () => {\n        step();\n    };\n\n    const handleMenuItemClick = (event, index) => {\n        setIsPolling(index === 0);\n        setSelectedIndex(index);\n        setOpen(false);\n    };\n\n    const handleToggle = () => {\n        setOpen(prevOpen => !prevOpen);\n    };\n\n    const handleClose = event => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return;\n        }\n        setOpen(false);\n    };\n\n    return (<>\n        <ButtonGroup\n            variant=\"contained\"\n            color=\"primary\"\n            ref={anchorRef}\n            aria-label=\"split button\"\n            style={{marginRight: 15}}\n        >\n            <Button onClick={handleClick} disabled={selectedIndex === 0}>{options[selectedIndex]}</Button>\n            <Button\n            color=\"primary\"\n            size=\"small\"\n            aria-owns={open ? 'menu-list-grow' : undefined}\n            aria-haspopup=\"true\"\n            onClick={handleToggle}\n            >\n            <ArrowDropDownIcon />\n            </Button>\n        </ButtonGroup>\n        <Popper open={open} anchorEl={anchorRef.current} transition disablePortal>\n            {({ TransitionProps, placement }) => (\n            <Grow\n                {...TransitionProps}\n                style={{\n                transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\n                }}\n            >\n                <Paper id=\"menu-list-grow\">\n                <ClickAwayListener onClickAway={handleClose}>\n                    <MenuList>\n                    {options.map((option, index) => (\n                        <MenuItem\n                        key={option}\n                        disabled={index === 2}\n                        selected={index === selectedIndex}\n                        onClick={event => handleMenuItemClick(event, index)}\n                        >\n                        {option}\n                        </MenuItem>\n                    ))}\n                    </MenuList>\n                </ClickAwayListener>\n                </Paper>\n            </Grow>\n            )}\n        </Popper>\n    </>);\n}\n\nexport default PollToggle;"]},"metadata":{},"sourceType":"module"}