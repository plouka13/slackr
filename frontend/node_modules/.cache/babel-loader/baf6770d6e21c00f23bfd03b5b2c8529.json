{"ast":null,"code":"// from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nimport { useEffect, useRef } from 'react';\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef(); // Remember the latest callback.\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\nexport const isMatchingId = (a, b) => parseInt(a, 10) === parseInt(b, 10);","map":{"version":3,"sources":["/Users/plouka/Projects/slackr/frontend/src/utils/index.js"],"names":["useEffect","useRef","useInterval","callback","delay","savedCallback","current","tick","id","setInterval","clearInterval","isMatchingId","a","b","parseInt"],"mappings":"AAAA;AACA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AAEA,OAAO,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,KAA/B,EAAsC;AACzC,QAAMC,aAAa,GAAGJ,MAAM,EAA5B,CADyC,CAGzC;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,aAAa,CAACC,OAAd,GAAwBH,QAAxB;AACH,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT,CAJyC,CAQzC;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACZ,aAASO,IAAT,GAAgB;AAChBF,MAAAA,aAAa,CAACC,OAAd;AACC;;AACD,QAAIF,KAAK,KAAK,IAAd,EAAoB;AACpB,UAAII,EAAE,GAAGC,WAAW,CAACF,IAAD,EAAOH,KAAP,CAApB;AACA,aAAO,MAAMM,aAAa,CAACF,EAAD,CAA1B;AACC;AACJ,GARQ,EAQN,CAACJ,KAAD,CARM,CAAT;AASH;AAED,OAAO,MAAMO,YAAY,GAAG,CAACC,CAAD,EAAGC,CAAH,KAASC,QAAQ,CAACF,CAAD,EAAG,EAAH,CAAR,KAAmBE,QAAQ,CAACD,CAAD,EAAG,EAAH,CAAzD","sourcesContent":["// from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nimport { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n        savedCallback.current();\n        }\n        if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n\nexport const isMatchingId = (a,b) => parseInt(a,10) === parseInt(b,10)\n"]},"metadata":{},"sourceType":"module"}