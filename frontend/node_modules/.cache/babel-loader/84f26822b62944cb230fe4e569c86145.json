{"ast":null,"code":"import axios from 'axios';\nimport qs from 'qs';\nimport _ from 'lodash';\nimport { url } from './utils/constants';\nimport { DEFAULT_ERROR_TEXT } from './utils/text';\nimport { toast } from 'react-toastify';\naxios.defaults.baseURL = url;\naxios.defaults.headers.put['Content-Type'] = 'application/json';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.headers.delete['Content-Type'] = 'application/json'; // temporarily cancel all requests until backend is ready\n\nconst CancelToken = axios.CancelToken;\naxios.interceptors.request.use(request => {\n  // if (request.method === 'put' || request.method === 'post' || request.method === 'delete') {\n  //     request.data = qs.stringify(request.data);\n  // }\n  return request;\n});\n\nconst errorHandler = error => {\n  // great gist https://gist.github.com/saqueib/a495af17d7c0e2fd5c2316b0822ebac3\n  // if has response show the error\n  console.error(error);\n  let message = DEFAULT_ERROR_TEXT;\n\n  if (error.response) {\n    console.log(error.response.data);\n    message = _.get(error, 'response.data.message') || DEFAULT_ERROR_TEXT;\n  }\n\n  toast.error(message);\n  return Promise.reject({ ...error\n  });\n};\n\nconst responseHandler = response => {\n  return response;\n};\n\naxios.interceptors.response.use(responseHandler, errorHandler);","map":{"version":3,"sources":["/Users/plouka/Projects/slackr/frontend/src/axios.js"],"names":["axios","qs","_","url","DEFAULT_ERROR_TEXT","toast","defaults","baseURL","headers","put","post","delete","CancelToken","interceptors","request","use","errorHandler","error","console","message","response","log","data","get","Promise","reject","responseHandler"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,SAASC,GAAT,QAAoB,mBAApB;AACA,SAASC,kBAAT,QAAmC,cAAnC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEAL,KAAK,CAACM,QAAN,CAAeC,OAAf,GAAyBJ,GAAzB;AACAH,KAAK,CAACM,QAAN,CAAeE,OAAf,CAAuBC,GAAvB,CAA2B,cAA3B,IAA6C,kBAA7C;AACAT,KAAK,CAACM,QAAN,CAAeE,OAAf,CAAuBE,IAAvB,CAA4B,cAA5B,IAA8C,kBAA9C;AACAV,KAAK,CAACM,QAAN,CAAeE,OAAf,CAAuBG,MAAvB,CAA8B,cAA9B,IAAgD,kBAAhD,C,CAEA;;AACA,MAAMC,WAAW,GAAGZ,KAAK,CAACY,WAA1B;AAEAZ,KAAK,CAACa,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCD,OAAD,IAAa;AACxC;AACA;AACA;AACA,SAAOA,OAAP;AACH,CALD;;AAOA,MAAME,YAAY,GAAIC,KAAD,IAAW;AAC5B;AAEA;AACAC,EAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AAEA,MAAIE,OAAO,GAAGf,kBAAd;;AAEA,MAAIa,KAAK,CAACG,QAAV,EAAoB;AAChBF,IAAAA,OAAO,CAACG,GAAR,CAAYJ,KAAK,CAACG,QAAN,CAAeE,IAA3B;AACAH,IAAAA,OAAO,GAAGjB,CAAC,CAACqB,GAAF,CAAMN,KAAN,EAAa,uBAAb,KAAyCb,kBAAnD;AACH;;AAEDC,EAAAA,KAAK,CAACY,KAAN,CAAYE,OAAZ;AAEA,SAAOK,OAAO,CAACC,MAAR,CAAe,EAAE,GAAGR;AAAL,GAAf,CAAP;AACH,CAhBD;;AAkBA,MAAMS,eAAe,GAAIN,QAAD,IAAc;AAClC,SAAOA,QAAP;AACH,CAFD;;AAIApB,KAAK,CAACa,YAAN,CAAmBO,QAAnB,CAA4BL,GAA5B,CAAgCW,eAAhC,EAAiDV,YAAjD","sourcesContent":["import axios from 'axios';\nimport qs from 'qs';\nimport _ from 'lodash';\n\nimport { url } from './utils/constants';\nimport { DEFAULT_ERROR_TEXT } from './utils/text';\nimport { toast } from 'react-toastify';\n\naxios.defaults.baseURL = url;\naxios.defaults.headers.put['Content-Type'] = 'application/json';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.headers.delete['Content-Type'] = 'application/json';\n\n// temporarily cancel all requests until backend is ready\nconst CancelToken = axios.CancelToken;\n\naxios.interceptors.request.use((request) => {\n    // if (request.method === 'put' || request.method === 'post' || request.method === 'delete') {\n    //     request.data = qs.stringify(request.data);\n    // }\n    return request;\n});\n\nconst errorHandler = (error) => {\n    // great gist https://gist.github.com/saqueib/a495af17d7c0e2fd5c2316b0822ebac3\n\n    // if has response show the error\n    console.error(error);\n\n    let message = DEFAULT_ERROR_TEXT;\n\n    if (error.response) {\n        console.log(error.response.data)\n        message = _.get(error, 'response.data.message') || DEFAULT_ERROR_TEXT;\n    }\n\n    toast.error(message);\n\n    return Promise.reject({ ...error })\n}\n\nconst responseHandler = (response) => {\n    return response;\n}\n\naxios.interceptors.response.use(responseHandler, errorHandler);"]},"metadata":{},"sourceType":"module"}