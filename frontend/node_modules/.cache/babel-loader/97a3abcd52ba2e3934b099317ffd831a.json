{"ast":null,"code":"var _jsxFileName = \"/Users/plouka/Projects/slackr/frontend/src/components/Message/AddMessage.js\";\nimport axios from 'axios';\nimport { Button, TextField, InputAdornment, IconButton, Typography } from '@material-ui/core';\nimport React from 'react';\nimport SendIcon from '@material-ui/icons/Send';\nimport TimerIcon from '@material-ui/icons/Timer';\nimport { makeStyles } from '@material-ui/styles';\nimport AuthContext from '../../AuthContext';\nimport { StepContext } from '../Channel/ChannelMessages';\nimport AddMessageTimerDialog from './AddMessageTimerDialog';\nimport { useInterval } from '../../utils';\nimport { useStep } from '../../utils/update';\nconst useStyles = makeStyles(theme => ({\n  flex: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    margin: theme.spacing(1),\n    marginRight: 0\n  },\n  button: {\n    margin: theme.spacing(1),\n    marginLeft: 0,\n    alignSelf: 'stretch'\n  },\n  rightIcon: {\n    marginLeft: theme.spacing(1)\n  },\n  standupTimer: {\n    margin: theme.spacing(2)\n  }\n}));\nconst TIMER_INACTIVE_VALUE = -1;\n\nfunction AddMessage({\n  channel_id = ''\n}) {\n  const classes = useStyles();\n  const [currentMessage, setCurrentMessage] = React.useState('');\n  const [currentTimer, setCurrentTimer] = React.useState(TIMER_INACTIVE_VALUE);\n  const [timerDialogOpen, setTimerDialogOpen] = React.useState(false);\n  const token = React.useContext(AuthContext);\n  let onAdd = React.useContext(StepContext);\n  onAdd = onAdd ? onAdd : () => {}; // sanity check\n\n  const isTimerSet = currentTimer !== TIMER_INACTIVE_VALUE;\n  const [standupRemaining, setStandupRemaining] = React.useState();\n  const [standupEndTime, setStandupEndTime] = React.useState();\n\n  const submitMessage = () => {\n    const message = currentMessage.trim();\n    if (!message) return;\n    setCurrentMessage('');\n    /**\n     * Sending a message when a standup is active\n     * note: probably makes sense that this takes precedence over\n     *       starting a standup.\n     */\n\n    if (standupRemaining && standupRemaining > 0) {\n      axios.post(`/standup/send`, {\n        token,\n        channel_id,\n        message\n      }).then(({\n        data\n      }) => {\n        console.log(data);\n        onAdd();\n      }).catch(err => {});\n      return;\n    }\n    /**\n     * Sending a message when the sendlater timer has been set\n     */\n\n\n    if (isTimerSet) {\n      axios.post(`/message/sendlater`, {\n        token,\n        channel_id,\n        message,\n        time_sent: currentTimer.getTime() / 1000 // ms to s conversion\n\n      }).then(({\n        data\n      }) => {\n        console.log(data);\n      }).catch(err => {});\n      setCurrentTimer(TIMER_INACTIVE_VALUE);\n      return;\n    }\n    /**\n     * Starting a standup (any message which starts with /standup)\n     */\n\n\n    if (message.startsWith('/standup')) {\n      const re = /\\/standup\\s+([1-9][0-9]*)/;\n      const found = message.match(re);\n\n      if (!found || found.length < 2) {\n        alert('Usage: /standup <duration in seconds>');\n      } else {\n        var length = parseInt(found[1], 10);\n\n        if (isNaN(length) || !Number.isInteger(length)) {\n          alert('Usage: /standup <duration in seconds>');\n        } else {\n          axios.post(`/standup/start`, {\n            token,\n            channel_id,\n            length\n          }).then(({\n            data\n          }) => {\n            const {\n              time_finish\n            } = data;\n            setStandupEndTime(time_finish);\n            alert(`You've started a standup for ${length} seconds`);\n          }).catch(err => {});\n        }\n      }\n\n      return;\n    }\n    /**\n     * Default message sending behaviour\n     */\n\n\n    axios.post(`/message/send`, {\n      token,\n      channel_id,\n      message\n    }).then(({\n      data\n    }) => {\n      console.log(data);\n      onAdd();\n    }).catch(err => {});\n  };\n\n  useInterval(() => {\n    if (standupEndTime > Date.now() / 1000) {\n      setStandupRemaining(() => Math.round(standupEndTime - Math.round(Date.now() / 1000)));\n    } else {\n      setStandupRemaining();\n    }\n  }, 1000);\n\n  const checkStandupActive = () => {\n    if (standupRemaining > 0) return;\n    axios.get('/standup/active', {\n      params: {\n        token,\n        channel_id\n      }\n    }).then(({\n      data\n    }) => {\n      const {\n        is_active = false,\n        time_finish\n      } = data;\n\n      if (is_active && time_finish) {\n        setStandupEndTime(time_finish);\n      }\n    }).catch(err => {});\n  };\n\n  const step = useStep(checkStandupActive, [currentMessage]\n  /* check when user is typing */\n  );\n\n  const keyDown = e => {\n    if (e.key === 'Enter' && !e.getModifierState('Shift')) {\n      e.preventDefault();\n      submitMessage();\n    }\n  };\n\n  return React.createElement(React.Fragment, null, standupRemaining > 0 && React.createElement(Typography, {\n    variant: \"caption\",\n    className: classes.standupTimer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, `STANDUP ACTIVE: ${standupRemaining} seconds remaining`), React.createElement(\"div\", {\n    className: classes.flex,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    className: classes.input,\n    label: \"Send a message \\uD83D\\uDCAC\",\n    multiline: true,\n    placeholder: \"...\" // helperText=\"Add a new message to this channel!\"\n    ,\n    fullWidth: true,\n    margin: \"normal\",\n    variant: \"filled\",\n    onKeyDown: keyDown,\n    value: currentMessage,\n    onChange: e => setCurrentMessage(e.target.value),\n    InputProps: {\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        \"aria-label\": \"toggle visibility\",\n        disabled: standupRemaining > 0,\n        onClick: () => isTimerSet ? setCurrentTimer(-1) : setTimerDialogOpen(true),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(TimerIcon, {\n        color: isTimerSet ? 'secondary' : undefined,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      })))\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }), React.createElement(Button, {\n    className: classes.button,\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: submitMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, \"Send\", React.createElement(SendIcon, {\n    className: classes.rightIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }))), React.createElement(AddMessageTimerDialog, {\n    open: timerDialogOpen,\n    handleClose: () => setTimerDialogOpen(false),\n    onTimerChange: setCurrentTimer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }));\n}\n\nexport default AddMessage;","map":{"version":3,"sources":["/Users/plouka/Projects/slackr/frontend/src/components/Message/AddMessage.js"],"names":["axios","Button","TextField","InputAdornment","IconButton","Typography","React","SendIcon","TimerIcon","makeStyles","AuthContext","StepContext","AddMessageTimerDialog","useInterval","useStep","useStyles","theme","flex","display","flexDirection","alignItems","input","margin","spacing","marginRight","button","marginLeft","alignSelf","rightIcon","standupTimer","TIMER_INACTIVE_VALUE","AddMessage","channel_id","classes","currentMessage","setCurrentMessage","useState","currentTimer","setCurrentTimer","timerDialogOpen","setTimerDialogOpen","token","useContext","onAdd","isTimerSet","standupRemaining","setStandupRemaining","standupEndTime","setStandupEndTime","submitMessage","message","trim","post","then","data","console","log","catch","err","time_sent","getTime","startsWith","re","found","match","length","alert","parseInt","isNaN","Number","isInteger","time_finish","Date","now","Math","round","checkStandupActive","get","params","is_active","step","keyDown","e","key","getModifierState","preventDefault","target","value","endAdornment","undefined"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n  Button,\n  TextField,\n  InputAdornment,\n  IconButton,\n  Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport SendIcon from '@material-ui/icons/Send';\nimport TimerIcon from '@material-ui/icons/Timer';\nimport { makeStyles } from '@material-ui/styles';\nimport AuthContext from '../../AuthContext';\nimport {StepContext} from '../Channel/ChannelMessages';\nimport AddMessageTimerDialog from './AddMessageTimerDialog';\nimport { useInterval } from '../../utils';\nimport { useStep } from '../../utils/update';\n\nconst useStyles = makeStyles((theme) => ({\n  flex: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    margin: theme.spacing(1),\n    marginRight: 0,\n  },\n  button: {\n    margin: theme.spacing(1),\n    marginLeft: 0,\n    alignSelf: 'stretch',\n  },\n  rightIcon: {\n    marginLeft: theme.spacing(1),\n  },\n  standupTimer: {\n    margin: theme.spacing(2),\n  }\n}));\n\nconst TIMER_INACTIVE_VALUE = -1;\n\nfunction AddMessage({ channel_id = '' }) {\n\n  const classes = useStyles();\n  const [currentMessage, setCurrentMessage] = React.useState('');\n  const [currentTimer, setCurrentTimer] = React.useState(TIMER_INACTIVE_VALUE);\n  const [timerDialogOpen, setTimerDialogOpen] = React.useState(false);\n  const token = React.useContext(AuthContext);\n  let onAdd = React.useContext(StepContext);\n  onAdd = onAdd ? onAdd : () => {}; // sanity check\n\n  const isTimerSet = currentTimer !== TIMER_INACTIVE_VALUE;\n\n  const [standupRemaining, setStandupRemaining] = React.useState();\n  const [standupEndTime, setStandupEndTime] = React.useState();\n\n  const submitMessage = () => {\n    const message = currentMessage.trim();\n    if (!message) return;\n    setCurrentMessage('');\n\n    /**\n     * Sending a message when a standup is active\n     * note: probably makes sense that this takes precedence over\n     *       starting a standup.\n     */\n    if (standupRemaining && standupRemaining > 0) {\n      axios.post(`/standup/send`, {\n        token,\n        channel_id,\n        message,\n      })\n        .then(({ data }) => {\n          console.log(data);\n          onAdd();\n        })\n        .catch((err) => {});\n      return;\n    }\n\n    /**\n     * Sending a message when the sendlater timer has been set\n     */\n    if (isTimerSet) {\n      axios.post(`/message/sendlater`, {\n        token,\n        channel_id,\n        message,\n        time_sent: (currentTimer.getTime() / 1000), // ms to s conversion\n      })\n        .then(({ data }) => {\n          console.log(data);\n        })\n        .catch((err) => {});\n      setCurrentTimer(TIMER_INACTIVE_VALUE);\n      return;\n    }\n\n    /**\n     * Starting a standup (any message which starts with /standup)\n     */\n    if (message.startsWith('/standup')) {\n      const re = /\\/standup\\s+([1-9][0-9]*)/;\n      const found = message.match(re);\n      if (!found || found.length < 2) {\n        alert('Usage: /standup <duration in seconds>');\n      } else {\n        var length = parseInt(found[1], 10);\n        if (isNaN(length) || !Number.isInteger(length)) {\n          alert('Usage: /standup <duration in seconds>');\n        } else {\n          axios.post(`/standup/start`, { token, channel_id, length })\n            .then(({ data }) => {\n              const { time_finish } = data;\n              setStandupEndTime(time_finish);\n              alert(`You've started a standup for ${length} seconds`);\n            })\n            .catch((err) => {});\n        }\n      }\n      return;\n    }\n\n    /**\n     * Default message sending behaviour\n     */\n    axios.post(`/message/send`, {\n      token,\n      channel_id,\n      message,\n    })\n      .then(({ data }) => {\n        console.log(data);\n        onAdd();\n      })\n      .catch((err) => {});\n  };\n\n  useInterval(() => {\n    if (standupEndTime > Date.now()/1000) {\n      setStandupRemaining(() => Math.round(standupEndTime - Math.round(Date.now()/1000)));\n    } else {\n      setStandupRemaining()\n    }\n  }, 1000);\n\n  const checkStandupActive = () => {\n    if (standupRemaining > 0) return;\n    axios\n    .get('/standup/active', { params: { token, channel_id } })\n    .then(({ data }) => {\n      const { is_active = false, time_finish } = data;\n      if (is_active && time_finish) {\n        setStandupEndTime(time_finish);\n      }\n    })\n    .catch((err) => {});\n  }\n\n  const step = useStep(checkStandupActive, [currentMessage] /* check when user is typing */);\n\n  const keyDown = (e) => {\n    if (e.key === 'Enter' && !e.getModifierState('Shift')) {\n      e.preventDefault();\n      submitMessage();\n    }\n  };\n\n  return (\n    <>\n      {standupRemaining > 0 && <Typography variant=\"caption\" className={classes.standupTimer}>\n        {`STANDUP ACTIVE: ${standupRemaining} seconds remaining`}\n      </Typography>}\n      <div className={classes.flex}>\n        <TextField\n          className={classes.input}\n          label=\"Send a message 💬\"\n          multiline\n          placeholder=\"...\"\n          // helperText=\"Add a new message to this channel!\"\n          fullWidth\n          margin=\"normal\"\n          variant=\"filled\"\n          onKeyDown={keyDown}\n          value={currentMessage}\n          onChange={(e) => setCurrentMessage(e.target.value)}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle visibility\"\n                  disabled={standupRemaining > 0}\n                  onClick={() =>\n                    isTimerSet ? setCurrentTimer(-1) : setTimerDialogOpen(true)\n                  }\n                >\n                  <TimerIcon color={isTimerSet ? 'secondary' : undefined} />\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n        />\n        <Button\n          className={classes.button}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={submitMessage}\n        >\n          Send\n          <SendIcon className={classes.rightIcon} />\n        </Button>\n      </div>\n      <AddMessageTimerDialog\n        open={timerDialogOpen}\n        handleClose={() => setTimerDialogOpen(false)}\n        onTimerChange={setCurrentTimer}\n      />\n    </>\n  );\n}\n\nexport default AddMessage;\n"]},"metadata":{},"sourceType":"module"}