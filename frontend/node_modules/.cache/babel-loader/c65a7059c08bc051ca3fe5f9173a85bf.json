{"ast":null,"code":"var _jsxFileName = \"/Users/plouka/Projects/slackr/frontend/src/components/Message/MessageReact.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Badge, IconButton } from '@material-ui/core';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbUpOutlinedIcon from '@material-ui/icons/ThumbUpOutlined';\nimport AuthContext from '../../AuthContext';\nimport { StepContext } from '../Channel/ChannelMessages';\n\nfunction MessageReact({\n  message_id,\n  reacts = []\n  /* [{ react_id, u_ids }] */\n\n}) {\n  const token = React.useContext(AuthContext);\n  let step = React.useContext(StepContext);\n  step = step ? step : () => {}; // sanity check\n\n  const messageReact = is_reacted => {\n    if (is_reacted) {\n      axios.post(`/message/unreact`, {\n        token,\n        message_id,\n        react_id: 1\n        /* FIXME */\n\n      }).then(() => {\n        step();\n      });\n    } else {\n      axios.post(`/message/react`, {\n        token,\n        message_id,\n        react_id: 1\n        /* FIXME */\n\n      }).then(() => {\n        step();\n      });\n    }\n  };\n\n  let thumbUpCount = 0;\n  let is_reacted = false;\n  const thumbUpIndex = reacts.findIndex(react => react.react_id === 1);\n\n  if (thumbUpIndex !== -1) {\n    thumbUpCount = reacts[thumbUpIndex].u_ids.length;\n    is_reacted = reacts[thumbUpIndex].is_this_user_reacted;\n  }\n\n  return React.createElement(Badge, {\n    anchorOrigin: {\n      horizontal: 'right',\n      vertical: 'bottom'\n    },\n    badgeContent: thumbUpCount,\n    color: \"secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    onClick: () => messageReact(is_reacted),\n    style: {\n      margin: 1\n    },\n    size: \"small\",\n    edge: \"end\",\n    \"aria-label\": \"delete\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, is_reacted ? React.createElement(ThumbUpIcon, {\n    fontSize: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }) : React.createElement(ThumbUpOutlinedIcon, {\n    fontSize: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })));\n}\n\nexport default MessageReact;","map":{"version":3,"sources":["/Users/plouka/Projects/slackr/frontend/src/components/Message/MessageReact.js"],"names":["React","axios","Badge","IconButton","ThumbUpIcon","ThumbUpOutlinedIcon","AuthContext","StepContext","MessageReact","message_id","reacts","token","useContext","step","messageReact","is_reacted","post","react_id","then","thumbUpCount","thumbUpIndex","findIndex","react","u_ids","length","is_this_user_reacted","horizontal","vertical","margin"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACEC,KADF,EAEEC,UAFF,QAGO,mBAHP;AAKA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,mBAAP,MAAgC,oCAAhC;AAEA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,SAAQC,WAAR,QAA0B,4BAA1B;;AAEA,SAASC,YAAT,CAAsB;AACpBC,EAAAA,UADoB;AAEpBC,EAAAA,MAAM,GAAG;AAAG;;AAFQ,CAAtB,EAGG;AAED,QAAMC,KAAK,GAAGX,KAAK,CAACY,UAAN,CAAiBN,WAAjB,CAAd;AACA,MAAIO,IAAI,GAAGb,KAAK,CAACY,UAAN,CAAiBL,WAAjB,CAAX;AACAM,EAAAA,IAAI,GAAGA,IAAI,GAAGA,IAAH,GAAU,MAAM,CAAE,CAA7B,CAJC,CAI8B;;AAE/B,QAAMC,YAAY,GAAIC,UAAD,IAAgB;AACnC,QAAIA,UAAJ,EAAgB;AACdd,MAAAA,KAAK,CAACe,IAAN,CAAY,kBAAZ,EAA+B;AAC7BL,QAAAA,KAD6B;AAE7BF,QAAAA,UAF6B;AAG7BQ,QAAAA,QAAQ,EAAE;AAAE;;AAHiB,OAA/B,EAKCC,IALD,CAKM,MAAM;AACVL,QAAAA,IAAI;AACL,OAPD;AAQD,KATD,MASO;AACLZ,MAAAA,KAAK,CAACe,IAAN,CAAY,gBAAZ,EAA6B;AAC3BL,QAAAA,KAD2B;AAE3BF,QAAAA,UAF2B;AAG3BQ,QAAAA,QAAQ,EAAE;AAAE;;AAHe,OAA7B,EAKCC,IALD,CAKM,MAAM;AACVL,QAAAA,IAAI;AACL,OAPD;AAQD;AACF,GApBD;;AAsBA,MAAIM,YAAY,GAAG,CAAnB;AACA,MAAIJ,UAAU,GAAG,KAAjB;AACA,QAAMK,YAAY,GAAGV,MAAM,CAACW,SAAP,CAAkBC,KAAD,IAAWA,KAAK,CAACL,QAAN,KAAmB,CAA/C,CAArB;;AACA,MAAIG,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACvBD,IAAAA,YAAY,GAAGT,MAAM,CAACU,YAAD,CAAN,CAAqBG,KAArB,CAA2BC,MAA1C;AACAT,IAAAA,UAAU,GAAGL,MAAM,CAACU,YAAD,CAAN,CAAqBK,oBAAlC;AACD;;AAED,SACE,oBAAC,KAAD;AACE,IAAA,YAAY,EAAE;AAAEC,MAAAA,UAAU,EAAE,OAAd;AAAuBC,MAAAA,QAAQ,EAAE;AAAjC,KADhB;AAEE,IAAA,YAAY,EAAER,YAFhB;AAGE,IAAA,KAAK,EAAC,WAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAE,MAAML,YAAY,CAACC,UAAD,CAD7B;AAEE,IAAA,KAAK,EAAE;AAAEa,MAAAA,MAAM,EAAE;AAAV,KAFT;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,IAAI,EAAC,KAJP;AAKE,kBAAW,QALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGb,UAAU,GACT,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADS,GAGT,oBAAC,mBAAD;AAAqB,IAAA,QAAQ,EAAC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,CALF,CADF;AAqBD;;AAED,eAAeP,YAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nimport {\n  Badge,\n  IconButton,\n} from '@material-ui/core';\n\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbUpOutlinedIcon from '@material-ui/icons/ThumbUpOutlined';\n\nimport AuthContext from '../../AuthContext';\nimport {StepContext} from '../Channel/ChannelMessages';\n\nfunction MessageReact({\n  message_id,\n  reacts = [] /* [{ react_id, u_ids }] */,\n}) {\n\n  const token = React.useContext(AuthContext);\n  let step = React.useContext(StepContext);\n  step = step ? step : () => {}; // sanity check\n\n  const messageReact = (is_reacted) => {\n    if (is_reacted) {\n      axios.post(`/message/unreact`, {\n        token,\n        message_id,\n        react_id: 1 /* FIXME */,\n      })\n      .then(() => {\n        step();\n      });\n    } else {\n      axios.post(`/message/react`, {\n        token,\n        message_id,\n        react_id: 1 /* FIXME */,\n      })\n      .then(() => {\n        step();\n      });\n    }\n  };\n\n  let thumbUpCount = 0;\n  let is_reacted = false;\n  const thumbUpIndex = reacts.findIndex((react) => react.react_id === 1);\n  if (thumbUpIndex !== -1) {\n    thumbUpCount = reacts[thumbUpIndex].u_ids.length;\n    is_reacted = reacts[thumbUpIndex].is_this_user_reacted;\n  }\n\n  return (\n    <Badge\n      anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\n      badgeContent={thumbUpCount}\n      color=\"secondary\"\n    >\n      <IconButton\n        onClick={() => messageReact(is_reacted)}\n        style={{ margin: 1 }}\n        size=\"small\"\n        edge=\"end\"\n        aria-label=\"delete\"\n      >\n        {is_reacted ? (\n          <ThumbUpIcon fontSize=\"small\" />\n          ) : (\n          <ThumbUpOutlinedIcon fontSize=\"small\" />\n        )}\n      </IconButton>\n    </Badge>\n  );\n}\n\nexport default MessageReact;\n"]},"metadata":{},"sourceType":"module"}