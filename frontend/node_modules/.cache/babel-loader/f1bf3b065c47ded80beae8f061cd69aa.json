{"ast":null,"code":"var _jsxFileName = \"/Users/plouka/Projects/slackr/frontend/src/components/Channel/ChannelMessages.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { List, ListSubheader, Button, ListItem } from '@material-ui/core';\nimport { useStep } from '../../utils/update';\nimport Message from '../Message';\nimport AuthContext from '../../AuthContext';\nimport AddMessage from '../Message/AddMessage';\nimport { PAGINATION_SIZE, SLICE_SIZE } from '../../utils/constants';\nexport const StepContext = React.createContext();\nexport const StepProvider = StepContext.Provider;\nexport const StepConsumer = StepContext.Consumer;\n\nfunction ChannelMessages({\n  channel_id = ''\n}) {\n  const [messages, setMessages] = React.useState([]);\n  const [pagination, setPagination] = React.useState({\n    \"isPaginating\": false,\n    \"currentStart\": 0,\n    \"currentEnd\": 0,\n    \"sliceStart\": 0\n  });\n  const token = React.useContext(AuthContext);\n\n  const fetchChannelMessages = () => axios.get('/channel/messages', {\n    params: {\n      token,\n      channel_id,\n      start: pagination.isPaginating ? pagination.currentStart : 0\n    }\n  }).then(({\n    data\n  }) => {\n    const {\n      messages: newMessages,\n      start,\n      end\n    } = data;\n    setPagination(pagination => ({ ...pagination,\n      currentEnd: end\n    })); // TODO: add/remove problems\n\n    setMessages(newMessages);\n  }).catch(err => {});\n\n  const step = useStep(fetchChannelMessages, [channel_id, pagination.currentStart]);\n\n  const onPrev = () => setPagination(({\n    sliceStart,\n    currentStart,\n    currentEnd,\n    ...pagination\n  }) => {\n    const pageSize = messages.length;\n\n    if (sliceStart + SLICE_SIZE < pageSize) {\n      return { ...pagination,\n        currentStart,\n        currentEnd,\n        sliceStart: sliceStart + SLICE_SIZE,\n        isPaginating: true\n      };\n    }\n\n    return { ...pagination,\n      currentEnd,\n      currentStart: currentEnd,\n      sliceStart: 0,\n      isPaginating: true\n    };\n  });\n\n  const onNext = () => setPagination(({\n    sliceStart,\n    currentStart,\n    ...pagination\n  }) => {\n    if (sliceStart >= SLICE_SIZE) {\n      return { ...pagination,\n        currentStart,\n        sliceStart: sliceStart - SLICE_SIZE,\n        isPaginating: !(currentStart == 0 && sliceStart == SLICE_SIZE)\n      };\n    }\n\n    if (currentStart >= PAGINATION_SIZE) {\n      if (currentStart) return { ...pagination,\n        currentStart: currentStart - PAGINATION_SIZE,\n        sliceStart: PAGINATION_SIZE - SLICE_SIZE\n      };\n    }\n\n    return { ...pagination,\n      currentStart: 0,\n      sliceStart: 0,\n      isPaginating: false\n    };\n  });\n\n  const {\n    currentStart,\n    currentEnd,\n    sliceStart,\n    isPaginating\n  } = pagination;\n  const isEnd = currentEnd == -1 && sliceStart >= messages.length - SLICE_SIZE;\n  let subheader = `Messages [${currentStart + sliceStart + 1}...${Math.min(currentStart + messages.length, currentStart + sliceStart + SLICE_SIZE)}]`;\n  if (messages.length == 0) subheader = `Messages (None)`;\n  return React.createElement(StepProvider, {\n    value: fetchChannelMessages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), React.createElement(List, {\n    subheader: React.createElement(ListSubheader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, subheader),\n    style: {\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, !isEnd && React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"outlined\",\n    color: \"secondary\",\n    onClick: onPrev,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Previous messages\")), messages.slice(sliceStart, sliceStart + SLICE_SIZE).reverse().map(message => React.createElement(Message, Object.assign({\n    key: message.message_id\n  }, message, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }))), isPaginating && React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"outlined\",\n    color: \"secondary\",\n    onClick: onNext,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"Next messages\"))), React.createElement(AddMessage, {\n    channel_id: channel_id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }));\n}\n\nexport default ChannelMessages;","map":{"version":3,"sources":["/Users/plouka/Projects/slackr/frontend/src/components/Channel/ChannelMessages.js"],"names":["React","axios","List","ListSubheader","Button","ListItem","useStep","Message","AuthContext","AddMessage","PAGINATION_SIZE","SLICE_SIZE","StepContext","createContext","StepProvider","Provider","StepConsumer","Consumer","ChannelMessages","channel_id","messages","setMessages","useState","pagination","setPagination","token","useContext","fetchChannelMessages","get","params","start","isPaginating","currentStart","then","data","newMessages","end","currentEnd","catch","err","step","onPrev","sliceStart","pageSize","length","onNext","isEnd","subheader","Math","min","width","slice","reverse","map","message","message_id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,IAAT,EAAeC,aAAf,EAA8BC,MAA9B,EAAsCC,QAAtC,QAAsD,mBAAtD;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,SAASC,eAAT,EAA0BC,UAA1B,QAA4C,uBAA5C;AAGA,OAAO,MAAMC,WAAW,GAAGZ,KAAK,CAACa,aAAN,EAApB;AACP,OAAO,MAAMC,YAAY,GAAGF,WAAW,CAACG,QAAjC;AACP,OAAO,MAAMC,YAAY,GAAGJ,WAAW,CAACK,QAAjC;;AAEP,SAASC,eAAT,CAAyB;AAAEC,EAAAA,UAAU,GAAG;AAAf,CAAzB,EAA8C;AAE5C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BrB,KAAK,CAACsB,QAAN,CAAe,EAAf,CAAhC;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BxB,KAAK,CAACsB,QAAN,CAAe;AACjD,oBAAgB,KADiC;AAEjD,oBAAgB,CAFiC;AAGjD,kBAAc,CAHmC;AAIjD,kBAAc;AAJmC,GAAf,CAApC;AAMA,QAAMG,KAAK,GAAGzB,KAAK,CAAC0B,UAAN,CAAiBlB,WAAjB,CAAd;;AAEA,QAAMmB,oBAAoB,GAAG,MAAM1B,KAAK,CACvC2B,GADkC,CAC9B,mBAD8B,EACT;AACxBC,IAAAA,MAAM,EAAE;AACNJ,MAAAA,KADM;AAENN,MAAAA,UAFM;AAGNW,MAAAA,KAAK,EAAEP,UAAU,CAACQ,YAAX,GAA0BR,UAAU,CAACS,YAArC,GAAoD;AAHrD;AADgB,GADS,EAQlCC,IARkC,CAQ7B,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAc;AAClB,UAAM;AAAEd,MAAAA,QAAQ,EAAEe,WAAZ;AAAyBL,MAAAA,KAAzB;AAAgCM,MAAAA;AAAhC,QAAwCF,IAA9C;AACAV,IAAAA,aAAa,CAACD,UAAU,KAAK,EAAC,GAAGA,UAAJ;AAAgBc,MAAAA,UAAU,EAAED;AAA5B,KAAL,CAAX,CAAb,CAFkB,CAE+C;;AACjEf,IAAAA,WAAW,CAACc,WAAD,CAAX;AACD,GAZkC,EAalCG,KAbkC,CAa3BC,GAAD,IAAS,CAAE,CAbiB,CAAnC;;AAeA,QAAMC,IAAI,GAAGlC,OAAO,CAACqB,oBAAD,EAAuB,CAACR,UAAD,EAAaI,UAAU,CAACS,YAAxB,CAAvB,CAApB;;AAEA,QAAMS,MAAM,GAAG,MAAMjB,aAAa,CAAC,CAAC;AAACkB,IAAAA,UAAD;AAAaV,IAAAA,YAAb;AAA2BK,IAAAA,UAA3B;AAAuC,OAAGd;AAA1C,GAAD,KAA2D;AAE5F,UAAMoB,QAAQ,GAAGvB,QAAQ,CAACwB,MAA1B;;AAEA,QAAIF,UAAU,GAAG/B,UAAb,GAA0BgC,QAA9B,EAAwC;AACtC,aAAO,EACL,GAAGpB,UADE;AAELS,QAAAA,YAFK;AAGLK,QAAAA,UAHK;AAILK,QAAAA,UAAU,EAAEA,UAAU,GAAG/B,UAJpB;AAKLoB,QAAAA,YAAY,EAAE;AALT,OAAP;AAOD;;AAED,WAAO,EACL,GAAGR,UADE;AAELc,MAAAA,UAFK;AAGLL,MAAAA,YAAY,EAAEK,UAHT;AAILK,MAAAA,UAAU,EAAE,CAJP;AAKLX,MAAAA,YAAY,EAAE;AALT,KAAP;AAQD,GAtBiC,CAAlC;;AAwBA,QAAMc,MAAM,GAAG,MAAMrB,aAAa,CAAC,CAAC;AAACkB,IAAAA,UAAD;AAAaV,IAAAA,YAAb;AAA2B,OAAGT;AAA9B,GAAD,KAA+C;AAEhF,QAAImB,UAAU,IAAI/B,UAAlB,EAA8B;AAC5B,aAAO,EACL,GAAGY,UADE;AAELS,QAAAA,YAFK;AAGLU,QAAAA,UAAU,EAAEA,UAAU,GAAG/B,UAHpB;AAILoB,QAAAA,YAAY,EAAE,EAAEC,YAAY,IAAI,CAAhB,IAAqBU,UAAU,IAAI/B,UAArC;AAJT,OAAP;AAMD;;AAED,QAAIqB,YAAY,IAAItB,eAApB,EAAqC;AACnC,UAAIsB,YAAJ,EAAkB,OAAO,EACvB,GAAGT,UADoB;AAEvBS,QAAAA,YAAY,EAAEA,YAAY,GAAGtB,eAFN;AAGvBgC,QAAAA,UAAU,EAAEhC,eAAe,GAACC;AAHL,OAAP;AAKnB;;AAED,WAAO,EACL,GAAGY,UADE;AAELS,MAAAA,YAAY,EAAE,CAFT;AAGLU,MAAAA,UAAU,EAAE,CAHP;AAILX,MAAAA,YAAY,EAAE;AAJT,KAAP;AAOD,GA1BiC,CAAlC;;AA4BA,QAAM;AAACC,IAAAA,YAAD;AAAeK,IAAAA,UAAf;AAA2BK,IAAAA,UAA3B;AAAuCX,IAAAA;AAAvC,MAAuDR,UAA7D;AAEA,QAAMuB,KAAK,GAAGT,UAAU,IAAI,CAAC,CAAf,IAAoBK,UAAU,IAAItB,QAAQ,CAACwB,MAAT,GAAkBjC,UAAlE;AAEA,MAAIoC,SAAS,GAAI,aAAYf,YAAY,GAACU,UAAb,GAAwB,CAAE,MAAKM,IAAI,CAACC,GAAL,CAASjB,YAAY,GAACZ,QAAQ,CAACwB,MAA/B,EAAuCZ,YAAY,GAACU,UAAb,GAAwB/B,UAA/D,CAA2E,GAAvI;AACA,MAAIS,QAAQ,CAACwB,MAAT,IAAmB,CAAvB,EAA0BG,SAAS,GAAI,iBAAb;AAE1B,SACE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEpB,oBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,IAAD;AACE,IAAA,SAAS,EAAE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgBoB,SAAhB,CADb;AAEE,IAAA,KAAK,EAAE;AAAEG,MAAAA,KAAK,EAAE;AAAT,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKK,CAACJ,KAAD,IACC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,UADV;AAEE,IAAA,KAAK,EAAC,WAFR;AAGE,IAAA,OAAO,EAAEL,MAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,CANN,EAiBGrB,QAAQ,CAAC+B,KAAT,CAAeT,UAAf,EAA2BA,UAAU,GAAG/B,UAAxC,EAAoDyC,OAApD,GAA8DC,GAA9D,CAAmEC,OAAD,IACjE,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAEA,OAAO,CAACC;AAAtB,KAAsCD,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD,CAjBH,EAqBKvB,YAAY,IACX,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,UADV;AAEE,IAAA,KAAK,EAAC,WAFR;AAGE,IAAA,OAAO,EAAEc,MAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,CAtBN,CAFF,EAoCE,oBAAC,UAAD;AAAY,IAAA,UAAU,EAAE1B,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApCF,CADF;AAwCD;;AAED,eAAeD,eAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nimport { List, ListSubheader, Button, ListItem } from '@material-ui/core';\nimport { useStep } from '../../utils/update';\nimport Message from '../Message';\nimport AuthContext from '../../AuthContext';\nimport AddMessage from '../Message/AddMessage';\nimport { PAGINATION_SIZE, SLICE_SIZE } from '../../utils/constants';\n\n\nexport const StepContext = React.createContext();\nexport const StepProvider = StepContext.Provider;\nexport const StepConsumer = StepContext.Consumer;\n\nfunction ChannelMessages({ channel_id = '' }) {\n\n  const [messages, setMessages] = React.useState([]);\n  const [pagination, setPagination] = React.useState({\n    \"isPaginating\": false,\n    \"currentStart\": 0,\n    \"currentEnd\": 0,\n    \"sliceStart\": 0,\n  })\n  const token = React.useContext(AuthContext);\n\n  const fetchChannelMessages = () => axios\n  .get('/channel/messages', {\n    params: {\n      token,\n      channel_id,\n      start: pagination.isPaginating ? pagination.currentStart : 0,\n    },\n  })\n  .then(({ data }) => {\n    const { messages: newMessages, start, end } = data;\n    setPagination(pagination => ({...pagination, currentEnd: end})); // TODO: add/remove problems\n    setMessages(newMessages);\n  })\n  .catch((err) => {});\n\n  const step = useStep(fetchChannelMessages, [channel_id, pagination.currentStart]);\n\n  const onPrev = () => setPagination(({sliceStart, currentStart, currentEnd, ...pagination}) => {\n\n    const pageSize = messages.length;\n\n    if (sliceStart + SLICE_SIZE < pageSize) {\n      return {\n        ...pagination,\n        currentStart,\n        currentEnd,\n        sliceStart: sliceStart + SLICE_SIZE,\n        isPaginating: true,\n      };\n    }\n\n    return {\n      ...pagination,\n      currentEnd,\n      currentStart: currentEnd,\n      sliceStart: 0,\n      isPaginating: true,\n    };\n\n  });\n\n  const onNext = () => setPagination(({sliceStart, currentStart, ...pagination}) => {\n\n    if (sliceStart >= SLICE_SIZE) {\n      return {\n        ...pagination,\n        currentStart,\n        sliceStart: sliceStart - SLICE_SIZE,\n        isPaginating: !(currentStart == 0 && sliceStart == SLICE_SIZE)\n      };\n    }\n\n    if (currentStart >= PAGINATION_SIZE) {\n      if (currentStart) return {\n        ...pagination,\n        currentStart: currentStart - PAGINATION_SIZE,\n        sliceStart: PAGINATION_SIZE-SLICE_SIZE,\n      };\n    }\n\n    return {\n      ...pagination,\n      currentStart: 0,\n      sliceStart: 0,\n      isPaginating: false,\n    };\n\n  });\n\n  const {currentStart, currentEnd, sliceStart, isPaginating} = pagination;\n\n  const isEnd = currentEnd == -1 && sliceStart >= messages.length - SLICE_SIZE;\n\n  let subheader = `Messages [${currentStart+sliceStart+1}...${Math.min(currentStart+messages.length, currentStart+sliceStart+SLICE_SIZE)}]`;\n  if (messages.length == 0) subheader = `Messages (None)`;\n\n  return (\n    <StepProvider value={fetchChannelMessages}>\n      <hr />\n      <List\n        subheader={<ListSubheader>{subheader}</ListSubheader>}\n        style={{ width: '100%' }}\n      >\n        {\n          (!isEnd &&\n            <ListItem>\n              <Button\n                variant=\"outlined\"\n                color=\"secondary\"\n                onClick={onPrev}\n              >\n                Previous messages\n              </Button>\n            </ListItem>\n          )\n        }\n        {messages.slice(sliceStart, sliceStart + SLICE_SIZE).reverse().map((message) => (\n          <Message key={message.message_id} {...message} />\n        ))}\n        {\n          (isPaginating &&\n            <ListItem>\n              <Button\n                variant=\"outlined\"\n                color=\"secondary\"\n                onClick={onNext}\n              >\n                Next messages\n              </Button>\n            </ListItem>\n          )\n        }\n      </List>\n      <AddMessage channel_id={channel_id} />\n    </StepProvider>\n  );\n}\n\nexport default ChannelMessages;\n"]},"metadata":{},"sourceType":"module"}