{"ast":null,"code":"import React from 'react';\nimport { useInterval } from './index';\nexport let stepSubscribers = [];\nexport const subscribeToStep = (subscriber, interval = 1) => {\n  if (stepSubscribers.find(o => o.subscriber === subscriber) !== undefined) return;\n  stepSubscribers.push({\n    subscriber,\n    interval\n  });\n};\nexport const unsubscribeToStep = unsubscriber => stepSubscribers = stepSubscribers.filter(o => o.subscriber !== unsubscriber);\nexport const step = iter => {\n  stepSubscribers.forEach(o => {\n    console.log(iter, o.interval, iter % o.interval == 0, o.subscriber);\n\n    if (!iter || iter % o.interval == 0) {\n      o.subscriber();\n    }\n  });\n};\nexport const useStep = (subscriber, watches = [], interval = 1) => {\n  const shouldSubscribe = subscriber && typeof subscriber === \"function\";\n  React.useEffect(() => {\n    if (shouldSubscribe) {\n      subscriber();\n      subscribeToStep(subscriber, interval);\n      return () => unsubscribeToStep(subscriber);\n    }\n  }, watches);\n  return step;\n};\nlet isPolling = false;\nexport const pollingInterval = 2000;\nexport const getIsPolling = () => isPolling;\nexport const setIsPolling = bool => {\n  isPolling = !!bool; // force boolean type\n};\n/* IMPORTANT: Called in PollToggle */\n\nlet count = 0;\nexport const usePolling = () => {\n  useInterval(() => {\n    if (isPolling) step(count++);\n  }, pollingInterval);\n};","map":{"version":3,"sources":["/Users/plouka/Projects/slackr/frontend/src/utils/update.js"],"names":["React","useInterval","stepSubscribers","subscribeToStep","subscriber","interval","find","o","undefined","push","unsubscribeToStep","unsubscriber","filter","step","iter","forEach","console","log","useStep","watches","shouldSubscribe","useEffect","isPolling","pollingInterval","getIsPolling","setIsPolling","bool","count","usePolling"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,SAA1B;AAEA,OAAO,IAAIC,eAAe,GAAG,EAAtB;AAEP,OAAO,MAAMC,eAAe,GAAG,CAACC,UAAD,EAAaC,QAAQ,GAAC,CAAtB,KAA4B;AACvD,MAAIH,eAAe,CAACI,IAAhB,CAAqBC,CAAC,IAAIA,CAAC,CAACH,UAAF,KAAiBA,UAA3C,MAA2DI,SAA/D,EAA0E;AAC1EN,EAAAA,eAAe,CAACO,IAAhB,CAAqB;AAAEL,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAArB;AACH,CAHM;AAIP,OAAO,MAAMK,iBAAiB,GAAIC,YAAD,IAAkBT,eAAe,GAAGA,eAAe,CAACU,MAAhB,CAAuBL,CAAC,IAAIA,CAAC,CAACH,UAAF,KAAiBO,YAA7C,CAA9D;AAEP,OAAO,MAAME,IAAI,GAAIC,IAAD,IAAU;AAC1BZ,EAAAA,eAAe,CAACa,OAAhB,CAAwBR,CAAC,IAAI;AACzBS,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAAkBP,CAAC,CAACF,QAApB,EAA8BS,IAAI,GAAGP,CAAC,CAACF,QAAT,IAAqB,CAAnD,EAAsDE,CAAC,CAACH,UAAxD;;AACA,QAAI,CAACU,IAAD,IAASA,IAAI,GAAGP,CAAC,CAACF,QAAT,IAAqB,CAAlC,EAAqC;AACjCE,MAAAA,CAAC,CAACH,UAAF;AACH;AACJ,GALD;AAMH,CAPM;AASP,OAAO,MAAMc,OAAO,GAAG,CAACd,UAAD,EAAae,OAAO,GAAC,EAArB,EAAyBd,QAAQ,GAAC,CAAlC,KAAwC;AAC3D,QAAMe,eAAe,GAAGhB,UAAU,IAAI,OAAOA,UAAP,KAAsB,UAA5D;AACAJ,EAAAA,KAAK,CAACqB,SAAN,CAAgB,MAAM;AAClB,QAAID,eAAJ,EAAqB;AACjBhB,MAAAA,UAAU;AACVD,MAAAA,eAAe,CAACC,UAAD,EAAaC,QAAb,CAAf;AACA,aAAO,MAAMK,iBAAiB,CAACN,UAAD,CAA9B;AACH;AACJ,GAND,EAMGe,OANH;AAOA,SAAON,IAAP;AACH,CAVM;AAYP,IAAIS,SAAS,GAAG,KAAhB;AACA,OAAO,MAAMC,eAAe,GAAG,IAAxB;AACP,OAAO,MAAMC,YAAY,GAAG,MAAMF,SAA3B;AACP,OAAO,MAAMG,YAAY,GAAGC,IAAI,IAAI;AAChCJ,EAAAA,SAAS,GAAG,CAAC,CAACI,IAAd,CADgC,CACZ;AACvB,CAFM;AAIP;;AACA,IAAIC,KAAK,GAAG,CAAZ;AACA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC5B3B,EAAAA,WAAW,CAAC,MAAM;AACd,QAAIqB,SAAJ,EAAeT,IAAI,CAACc,KAAK,EAAN,CAAJ;AAClB,GAFU,EAERJ,eAFQ,CAAX;AAGH,CAJM","sourcesContent":["import React from 'react';\nimport {useInterval} from './index';\n\nexport let stepSubscribers = [];\n\nexport const subscribeToStep = (subscriber, interval=1) => {\n    if (stepSubscribers.find(o => o.subscriber === subscriber) !== undefined) return;\n    stepSubscribers.push({ subscriber, interval });\n}\nexport const unsubscribeToStep = (unsubscriber) => stepSubscribers = stepSubscribers.filter(o => o.subscriber !== unsubscriber);\n\nexport const step = (iter) => {\n    stepSubscribers.forEach(o => {\n        console.log(iter, o.interval, iter % o.interval == 0, o.subscriber)\n        if (!iter || iter % o.interval == 0) {\n            o.subscriber()\n        }\n    });\n}\n\nexport const useStep = (subscriber, watches=[], interval=1) => {\n    const shouldSubscribe = subscriber && typeof subscriber === \"function\";\n    React.useEffect(() => {\n        if (shouldSubscribe) {\n            subscriber();\n            subscribeToStep(subscriber, interval);\n            return () => unsubscribeToStep(subscriber);\n        }\n    }, watches);\n    return step;\n};\n\nlet isPolling = false;\nexport const pollingInterval = 2000;\nexport const getIsPolling = () => isPolling;\nexport const setIsPolling = bool => {\n    isPolling = !!bool; // force boolean type\n}\n\n/* IMPORTANT: Called in PollToggle */\nlet count = 0;\nexport const usePolling = () => {\n    useInterval(() => {\n        if (isPolling) step(count++);\n    }, pollingInterval);\n}\n"]},"metadata":{},"sourceType":"module"}